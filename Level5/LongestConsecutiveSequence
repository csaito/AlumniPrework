public class Solution {
	public int longestConsecutive(final List<Integer> a) {
	    HashMap<Integer, Integer> sequenceMap = new HashMap<Integer, Integer>();
	    int longest = 1;
	    if (a.size() <= 1) {
	        return a.size();
	    }
	    
	    for (int i = 0; i < a.size(); i++) {
	        Integer num = a.get(i);
	        int seq = getValue(sequenceMap, num);
	        if (seq == 0) {
	            int left = getValue(sequenceMap, num-1);
	            int right = getValue(sequenceMap, num+1);
	            int currentSeq = left + right + 1;
	            sequenceMap.put(num, currentSeq);
	            if (left > 0) {
	                sequenceMap.put(num-left, currentSeq);
	            }
	            if (right > 0) {
	                sequenceMap.put(num+right, currentSeq);
	            } 
	            if (longest < currentSeq) {
	                longest = currentSeq;
	            }
	        } else {
	            // duplicate - ignore
	        }
	    }
	    //printMap(sequenceMap);
	    return longest;
	}
	private int getValue(HashMap<Integer, Integer> map, int key) {
	    Integer num = map.get(key);
	    if (num != null) {
	        return num;
	    } else {
	        return 0;
	    }
	}
	private void printMap(HashMap<Integer, Integer> map) {
	    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            System.out.println("[" + key + "," + value + "]");
        }
	}
}
